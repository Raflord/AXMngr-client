/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const IndexLazyRouteImport = createFileRoute('/')()
const MadeiraIndexLazyRouteImport = createFileRoute('/madeira/')()
const InsumosIndexLazyRouteImport = createFileRoute('/insumos/')()
const CeluloseIndexLazyRouteImport = createFileRoute('/celulose/')()
const CeluloseTestLazyRouteImport = createFileRoute('/celulose/test')()
const CeluloseRelatorioLazyRouteImport = createFileRoute(
  '/celulose/relatorio',
)()
const CeluloseManualLazyRouteImport = createFileRoute('/celulose/manual')()

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const MadeiraIndexLazyRoute = MadeiraIndexLazyRouteImport.update({
  id: '/madeira/',
  path: '/madeira/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/madeira/index.lazy').then((d) => d.Route))
const InsumosIndexLazyRoute = InsumosIndexLazyRouteImport.update({
  id: '/insumos/',
  path: '/insumos/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/insumos/index.lazy').then((d) => d.Route))
const CeluloseIndexLazyRoute = CeluloseIndexLazyRouteImport.update({
  id: '/celulose/',
  path: '/celulose/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/celulose/index.lazy').then((d) => d.Route),
)
const CeluloseTestLazyRoute = CeluloseTestLazyRouteImport.update({
  id: '/celulose/test',
  path: '/celulose/test',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/celulose/test.lazy').then((d) => d.Route))
const CeluloseRelatorioLazyRoute = CeluloseRelatorioLazyRouteImport.update({
  id: '/celulose/relatorio',
  path: '/celulose/relatorio',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/celulose/relatorio.lazy').then((d) => d.Route),
)
const CeluloseManualLazyRoute = CeluloseManualLazyRouteImport.update({
  id: '/celulose/manual',
  path: '/celulose/manual',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/celulose/manual.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/celulose/manual': typeof CeluloseManualLazyRoute
  '/celulose/relatorio': typeof CeluloseRelatorioLazyRoute
  '/celulose/test': typeof CeluloseTestLazyRoute
  '/celulose': typeof CeluloseIndexLazyRoute
  '/insumos': typeof InsumosIndexLazyRoute
  '/madeira': typeof MadeiraIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/celulose/manual': typeof CeluloseManualLazyRoute
  '/celulose/relatorio': typeof CeluloseRelatorioLazyRoute
  '/celulose/test': typeof CeluloseTestLazyRoute
  '/celulose': typeof CeluloseIndexLazyRoute
  '/insumos': typeof InsumosIndexLazyRoute
  '/madeira': typeof MadeiraIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/celulose/manual': typeof CeluloseManualLazyRoute
  '/celulose/relatorio': typeof CeluloseRelatorioLazyRoute
  '/celulose/test': typeof CeluloseTestLazyRoute
  '/celulose/': typeof CeluloseIndexLazyRoute
  '/insumos/': typeof InsumosIndexLazyRoute
  '/madeira/': typeof MadeiraIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/celulose/manual'
    | '/celulose/relatorio'
    | '/celulose/test'
    | '/celulose'
    | '/insumos'
    | '/madeira'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/celulose/manual'
    | '/celulose/relatorio'
    | '/celulose/test'
    | '/celulose'
    | '/insumos'
    | '/madeira'
  id:
    | '__root__'
    | '/'
    | '/celulose/manual'
    | '/celulose/relatorio'
    | '/celulose/test'
    | '/celulose/'
    | '/insumos/'
    | '/madeira/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CeluloseManualLazyRoute: typeof CeluloseManualLazyRoute
  CeluloseRelatorioLazyRoute: typeof CeluloseRelatorioLazyRoute
  CeluloseTestLazyRoute: typeof CeluloseTestLazyRoute
  CeluloseIndexLazyRoute: typeof CeluloseIndexLazyRoute
  InsumosIndexLazyRoute: typeof InsumosIndexLazyRoute
  MadeiraIndexLazyRoute: typeof MadeiraIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/madeira/': {
      id: '/madeira/'
      path: '/madeira'
      fullPath: '/madeira'
      preLoaderRoute: typeof MadeiraIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/insumos/': {
      id: '/insumos/'
      path: '/insumos'
      fullPath: '/insumos'
      preLoaderRoute: typeof InsumosIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/celulose/': {
      id: '/celulose/'
      path: '/celulose'
      fullPath: '/celulose'
      preLoaderRoute: typeof CeluloseIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/celulose/test': {
      id: '/celulose/test'
      path: '/celulose/test'
      fullPath: '/celulose/test'
      preLoaderRoute: typeof CeluloseTestLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/celulose/relatorio': {
      id: '/celulose/relatorio'
      path: '/celulose/relatorio'
      fullPath: '/celulose/relatorio'
      preLoaderRoute: typeof CeluloseRelatorioLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/celulose/manual': {
      id: '/celulose/manual'
      path: '/celulose/manual'
      fullPath: '/celulose/manual'
      preLoaderRoute: typeof CeluloseManualLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CeluloseManualLazyRoute: CeluloseManualLazyRoute,
  CeluloseRelatorioLazyRoute: CeluloseRelatorioLazyRoute,
  CeluloseTestLazyRoute: CeluloseTestLazyRoute,
  CeluloseIndexLazyRoute: CeluloseIndexLazyRoute,
  InsumosIndexLazyRoute: InsumosIndexLazyRoute,
  MadeiraIndexLazyRoute: MadeiraIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
